// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  group: (where?: GroupWhereInput) => Promise<boolean>;
  groupParticipant: (where?: GroupParticipantWhereInput) => Promise<boolean>;
  session: (where?: SessionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  groupParticipant: (
    where: GroupParticipantWhereUniqueInput
  ) => GroupParticipantNullablePromise;
  groupParticipants: (args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GroupParticipant>;
  groupParticipantsConnection: (args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupParticipantConnectionPromise;
  session: (where: SessionWhereUniqueInput) => SessionNullablePromise;
  sessions: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Session>;
  sessionsConnection: (args?: {
    where?: SessionWhereInput;
    orderBy?: SessionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SessionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createGroupParticipant: (
    data: GroupParticipantCreateInput
  ) => GroupParticipantPromise;
  updateGroupParticipant: (args: {
    data: GroupParticipantUpdateInput;
    where: GroupParticipantWhereUniqueInput;
  }) => GroupParticipantPromise;
  updateManyGroupParticipants: (args: {
    data: GroupParticipantUpdateManyMutationInput;
    where?: GroupParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertGroupParticipant: (args: {
    where: GroupParticipantWhereUniqueInput;
    create: GroupParticipantCreateInput;
    update: GroupParticipantUpdateInput;
  }) => GroupParticipantPromise;
  deleteGroupParticipant: (
    where: GroupParticipantWhereUniqueInput
  ) => GroupParticipantPromise;
  deleteManyGroupParticipants: (
    where?: GroupParticipantWhereInput
  ) => BatchPayloadPromise;
  createSession: (data: SessionCreateInput) => SessionPromise;
  updateSession: (args: {
    data: SessionUpdateInput;
    where: SessionWhereUniqueInput;
  }) => SessionPromise;
  updateManySessions: (args: {
    data: SessionUpdateManyMutationInput;
    where?: SessionWhereInput;
  }) => BatchPayloadPromise;
  upsertSession: (args: {
    where: SessionWhereUniqueInput;
    create: SessionCreateInput;
    update: SessionUpdateInput;
  }) => SessionPromise;
  deleteSession: (where: SessionWhereUniqueInput) => SessionPromise;
  deleteManySessions: (where?: SessionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  groupParticipant: (
    where?: GroupParticipantSubscriptionWhereInput
  ) => GroupParticipantSubscriptionPayloadSubscription;
  session: (
    where?: SessionSubscriptionWhereInput
  ) => SessionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroupParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type GroupOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type SessionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "token_ASC"
  | "token_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput>;
  update?: Maybe<UserUpdateWithoutGroupsDataInput>;
  upsert?: Maybe<UserUpsertWithoutGroupsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupParticipantUpsertWithWhereUniqueWithoutGroupIdInput {
  where: GroupParticipantWhereUniqueInput;
  update: GroupParticipantUpdateWithoutGroupIdDataInput;
  create: GroupParticipantCreateWithoutGroupIdInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  groups_every?: Maybe<GroupParticipantWhereInput>;
  groups_some?: Maybe<GroupParticipantWhereInput>;
  groups_none?: Maybe<GroupParticipantWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface GroupCreateWithoutGroupParticipantsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface GroupParticipantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    GroupParticipantScalarWhereInput[] | GroupParticipantScalarWhereInput
  >;
  OR?: Maybe<
    GroupParticipantScalarWhereInput[] | GroupParticipantScalarWhereInput
  >;
  NOT?: Maybe<
    GroupParticipantScalarWhereInput[] | GroupParticipantScalarWhereInput
  >;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  groupParticipants?: Maybe<GroupParticipantCreateManyWithoutGroupIdInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface GroupParticipantCreateManyWithoutGroupIdInput {
  create?: Maybe<
    | GroupParticipantCreateWithoutGroupIdInput[]
    | GroupParticipantCreateWithoutGroupIdInput
  >;
  connect?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
}

export interface GroupParticipantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupParticipantWhereInput>;
  AND?: Maybe<
    | GroupParticipantSubscriptionWhereInput[]
    | GroupParticipantSubscriptionWhereInput
  >;
  OR?: Maybe<
    | GroupParticipantSubscriptionWhereInput[]
    | GroupParticipantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | GroupParticipantSubscriptionWhereInput[]
    | GroupParticipantSubscriptionWhereInput
  >;
}

export interface GroupParticipantCreateWithoutGroupIdInput {
  id?: Maybe<ID_Input>;
  userId?: Maybe<UserCreateOneWithoutGroupsInput>;
  name: String;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserCreateOneWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GroupParticipantUpsertWithWhereUniqueWithoutUserIdInput {
  where: GroupParticipantWhereUniqueInput;
  update: GroupParticipantUpdateWithoutUserIdDataInput;
  create: GroupParticipantCreateWithoutUserIdInput;
}

export interface UserCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  password: String;
}

export interface GroupParticipantUpdateWithWhereUniqueWithoutUserIdInput {
  where: GroupParticipantWhereUniqueInput;
  data: GroupParticipantUpdateWithoutUserIdDataInput;
}

export interface GroupUpdateInput {
  name?: Maybe<String>;
  groupParticipants?: Maybe<GroupParticipantUpdateManyWithoutGroupIdInput>;
}

export interface GroupParticipantUpdateManyWithoutUserIdInput {
  create?: Maybe<
    | GroupParticipantCreateWithoutUserIdInput[]
    | GroupParticipantCreateWithoutUserIdInput
  >;
  delete?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  set?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | GroupParticipantUpdateWithWhereUniqueWithoutUserIdInput[]
    | GroupParticipantUpdateWithWhereUniqueWithoutUserIdInput
  >;
  upsert?: Maybe<
    | GroupParticipantUpsertWithWhereUniqueWithoutUserIdInput[]
    | GroupParticipantUpsertWithWhereUniqueWithoutUserIdInput
  >;
  deleteMany?: Maybe<
    GroupParticipantScalarWhereInput[] | GroupParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroupParticipantUpdateManyWithWhereNestedInput[]
    | GroupParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface GroupParticipantUpdateManyWithoutGroupIdInput {
  create?: Maybe<
    | GroupParticipantCreateWithoutGroupIdInput[]
    | GroupParticipantCreateWithoutGroupIdInput
  >;
  delete?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  connect?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  set?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  disconnect?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
  update?: Maybe<
    | GroupParticipantUpdateWithWhereUniqueWithoutGroupIdInput[]
    | GroupParticipantUpdateWithWhereUniqueWithoutGroupIdInput
  >;
  upsert?: Maybe<
    | GroupParticipantUpsertWithWhereUniqueWithoutGroupIdInput[]
    | GroupParticipantUpsertWithWhereUniqueWithoutGroupIdInput
  >;
  deleteMany?: Maybe<
    GroupParticipantScalarWhereInput[] | GroupParticipantScalarWhereInput
  >;
  updateMany?: Maybe<
    | GroupParticipantUpdateManyWithWhereNestedInput[]
    | GroupParticipantUpdateManyWithWhereNestedInput
  >;
}

export interface GroupParticipantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  groupId?: Maybe<GroupWhereInput>;
  userId?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroupParticipantWhereInput[] | GroupParticipantWhereInput>;
  OR?: Maybe<GroupParticipantWhereInput[] | GroupParticipantWhereInput>;
  NOT?: Maybe<GroupParticipantWhereInput[] | GroupParticipantWhereInput>;
}

export interface GroupParticipantUpdateWithWhereUniqueWithoutGroupIdInput {
  where: GroupParticipantWhereUniqueInput;
  data: GroupParticipantUpdateWithoutGroupIdDataInput;
}

export interface GroupParticipantCreateWithoutUserIdInput {
  id?: Maybe<ID_Input>;
  groupId?: Maybe<GroupCreateOneWithoutGroupParticipantsInput>;
  name: String;
}

export interface GroupParticipantUpdateWithoutGroupIdDataInput {
  userId?: Maybe<UserUpdateOneWithoutGroupsInput>;
  name?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface GroupParticipantUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface SessionUpdateManyMutationInput {
  email?: Maybe<String>;
  token?: Maybe<String>;
}

export interface UserUpdateWithoutGroupsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface SessionCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  token: String;
}

export interface UserUpsertWithoutGroupsInput {
  update: UserUpdateWithoutGroupsDataInput;
  create: UserCreateWithoutGroupsInput;
}

export interface SessionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SessionWhereInput>;
  AND?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  OR?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
  NOT?: Maybe<SessionSubscriptionWhereInput[] | SessionSubscriptionWhereInput>;
}

export interface GroupUpsertWithoutGroupParticipantsInput {
  update: GroupUpdateWithoutGroupParticipantsDataInput;
  create: GroupCreateWithoutGroupParticipantsInput;
}

export type GroupParticipantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateWithoutGroupParticipantsDataInput {
  name?: Maybe<String>;
}

export type SessionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  token?: Maybe<String>;
}>;

export interface GroupParticipantUpdateManyWithWhereNestedInput {
  where: GroupParticipantScalarWhereInput;
  data: GroupParticipantUpdateManyDataInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  groups?: Maybe<GroupParticipantUpdateManyWithoutUserIdInput>;
}

export interface GroupParticipantUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  password: String;
  groups?: Maybe<GroupParticipantCreateManyWithoutUserIdInput>;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  groupParticipants_every?: Maybe<GroupParticipantWhereInput>;
  groupParticipants_some?: Maybe<GroupParticipantWhereInput>;
  groupParticipants_none?: Maybe<GroupParticipantWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface GroupCreateOneWithoutGroupParticipantsInput {
  create?: Maybe<GroupCreateWithoutGroupParticipantsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupParticipantCreateInput {
  id?: Maybe<ID_Input>;
  groupId?: Maybe<GroupCreateOneWithoutGroupParticipantsInput>;
  userId?: Maybe<UserCreateOneWithoutGroupsInput>;
  name: String;
}

export interface GroupParticipantUpdateInput {
  groupId?: Maybe<GroupUpdateOneWithoutGroupParticipantsInput>;
  userId?: Maybe<UserUpdateOneWithoutGroupsInput>;
  name?: Maybe<String>;
}

export interface GroupUpdateOneWithoutGroupParticipantsInput {
  create?: Maybe<GroupCreateWithoutGroupParticipantsInput>;
  update?: Maybe<GroupUpdateWithoutGroupParticipantsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutGroupParticipantsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface SessionUpdateInput {
  email?: Maybe<String>;
  token?: Maybe<String>;
}

export interface GroupParticipantCreateManyWithoutUserIdInput {
  create?: Maybe<
    | GroupParticipantCreateWithoutUserIdInput[]
    | GroupParticipantCreateWithoutUserIdInput
  >;
  connect?: Maybe<
    GroupParticipantWhereUniqueInput[] | GroupParticipantWhereUniqueInput
  >;
}

export interface SessionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  AND?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  OR?: Maybe<SessionWhereInput[] | SessionWhereInput>;
  NOT?: Maybe<SessionWhereInput[] | SessionWhereInput>;
}

export interface GroupParticipantUpdateWithoutUserIdDataInput {
  groupId?: Maybe<GroupUpdateOneWithoutGroupParticipantsInput>;
  name?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface GroupParticipantConnection {
  pageInfo: PageInfo;
  edges: GroupParticipantEdge[];
}

export interface GroupParticipantConnectionPromise
  extends Promise<GroupParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupParticipantEdge>>() => T;
  aggregate: <T = AggregateGroupParticipantPromise>() => T;
}

export interface GroupParticipantConnectionSubscription
  extends Promise<AsyncIterator<GroupParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupParticipantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupParticipantSubscription>() => T;
}

export interface GroupParticipant {
  id: ID_Output;
  name: String;
}

export interface GroupParticipantPromise
  extends Promise<GroupParticipant>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  groupId: <T = GroupPromise>() => T;
  userId: <T = UserPromise>() => T;
  name: () => Promise<String>;
}

export interface GroupParticipantSubscription
  extends Promise<AsyncIterator<GroupParticipant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  groupId: <T = GroupSubscription>() => T;
  userId: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GroupParticipantNullablePromise
  extends Promise<GroupParticipant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  groupId: <T = GroupPromise>() => T;
  userId: <T = UserPromise>() => T;
  name: () => Promise<String>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  groups: <T = FragmentableArray<GroupParticipant>>(args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  groups: <T = Promise<AsyncIterator<GroupParticipantSubscription>>>(args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  groups: <T = FragmentableArray<GroupParticipant>>(args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SessionSubscriptionPayload {
  mutation: MutationType;
  node: Session;
  updatedFields: String[];
  previousValues: SessionPreviousValues;
}

export interface SessionSubscriptionPayloadPromise
  extends Promise<SessionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SessionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SessionPreviousValuesPromise>() => T;
}

export interface SessionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SessionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SessionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SessionPreviousValuesSubscription>() => T;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  name: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  groupParticipants: <T = FragmentableArray<GroupParticipant>>(args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  groupParticipants: <
    T = Promise<AsyncIterator<GroupParticipantSubscription>>
  >(args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  groupParticipants: <T = FragmentableArray<GroupParticipant>>(args?: {
    where?: GroupParticipantWhereInput;
    orderBy?: GroupParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateSession {
  count: Int;
}

export interface AggregateSessionPromise
  extends Promise<AggregateSession>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSessionSubscription
  extends Promise<AsyncIterator<AggregateSession>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface SessionConnection {
  pageInfo: PageInfo;
  edges: SessionEdge[];
}

export interface SessionConnectionPromise
  extends Promise<SessionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SessionEdge>>() => T;
  aggregate: <T = AggregateSessionPromise>() => T;
}

export interface SessionConnectionSubscription
  extends Promise<AsyncIterator<SessionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SessionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSessionSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroupParticipant {
  count: Int;
}

export interface AggregateGroupParticipantPromise
  extends Promise<AggregateGroupParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupParticipantSubscription
  extends Promise<AsyncIterator<AggregateGroupParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupParticipantPreviousValues {
  id: ID_Output;
  name: String;
}

export interface GroupParticipantPreviousValuesPromise
  extends Promise<GroupParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface GroupParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface GroupParticipantSubscriptionPayload {
  mutation: MutationType;
  node: GroupParticipant;
  updatedFields: String[];
  previousValues: GroupParticipantPreviousValues;
}

export interface GroupParticipantSubscriptionPayloadPromise
  extends Promise<GroupParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupParticipantPreviousValuesPromise>() => T;
}

export interface GroupParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupParticipantPreviousValuesSubscription>() => T;
}

export interface SessionPreviousValues {
  id: ID_Output;
  email: String;
  token: String;
}

export interface SessionPreviousValuesPromise
  extends Promise<SessionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  token: () => Promise<String>;
}

export interface SessionPreviousValuesSubscription
  extends Promise<AsyncIterator<SessionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface GroupParticipantEdge {
  node: GroupParticipant;
  cursor: String;
}

export interface GroupParticipantEdgePromise
  extends Promise<GroupParticipantEdge>,
    Fragmentable {
  node: <T = GroupParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupParticipantEdgeSubscription
  extends Promise<AsyncIterator<GroupParticipantEdge>>,
    Fragmentable {
  node: <T = GroupParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Session {
  id: ID_Output;
  email: String;
  token: String;
}

export interface SessionPromise extends Promise<Session>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  token: () => Promise<String>;
}

export interface SessionSubscription
  extends Promise<AsyncIterator<Session>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
}

export interface SessionNullablePromise
  extends Promise<Session | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  token: () => Promise<String>;
}

export interface SessionEdge {
  node: Session;
  cursor: String;
}

export interface SessionEdgePromise extends Promise<SessionEdge>, Fragmentable {
  node: <T = SessionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SessionEdgeSubscription
  extends Promise<AsyncIterator<SessionEdge>>,
    Fragmentable {
  node: <T = SessionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Session",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "GroupParticipant",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
